diff --git a/CaptureOverlay.qml b/CaptureOverlay.qml
index 22eb03a..e3748dc 100644
--- a/CaptureOverlay.qml
+++ b/CaptureOverlay.qml
@@ -24,6 +24,8 @@ SettingsOverlay {
     property int _recordingDuration: clock.enabled ? ((clock.time - _startTime) / 1000) : 0
     property var _startTime: new Date()
 
+    property alias zoomIndicator: zoomIndicator
+
     width: captureView.width
     height: captureView.height
 
diff --git a/CaptureView.qml b/CaptureView.qml
index 2b83932..7ea04bb 100644
--- a/CaptureView.qml
+++ b/CaptureView.qml
@@ -454,8 +454,6 @@ FocusScope {
 
         viewfinder {
             resolution: Settings.mode.viewfinderResolution
-            minimumFrameRate: 30
-            maximumFrameRate: 30
         }
 
         metaData {
@@ -670,26 +668,30 @@ FocusScope {
     // enough if only filtering inside the application
     MediaKey {
         id: volumeUp
-        enabled: camera.imageCapture.ready
-                    && keysResource.acquired
-                    && camera.captureMode == Camera.CaptureStillImage
-                    && !captureButtonPressed
-                    && !captureView._captureOnFocus
+        enabled: camKeyEnabled || (captureView.activeFocus && camera.captureMode == Camera.CaptureVideo)
         key: Qt.Key_VolumeUp
-        onPressed: camera.lockAutoFocus()
-        onReleased: {
-            if (enabled)
-                captureView._triggerCapture()
+        onPressed: {
+            camera.digitalZoom = Math.min(camera.maximumDigitalZoom, camera.digitalZoom + 1)
+            captureOverlay.zoomIndicator.maximumZoom = camera.maximumDigitalZoom
+            captureOverlay.zoomIndicator.show()
+	}
+        onRepeat: {
+            camera.digitalZoom = Math.min(camera.maximumDigitalZoom, camera.digitalZoom + 1)
+            captureOverlay.zoomIndicator.show()
         }
     }
     MediaKey {
         id: volumeDown
         enabled: volumeUp.enabled
         key: Qt.Key_VolumeDown
-        onPressed: camera.lockAutoFocus()
-        onReleased: {
-            if (enabled)
-                captureView._triggerCapture()
+        onPressed: {
+            camera.digitalZoom = Math.max(1, camera.digitalZoom - 1)
+            captureOverlay.zoomIndicator.show()
+        }
+
+        onRepeat: {
+            camera.digitalZoom = Math.max(1, camera.digitalZoom - 1)
+            captureOverlay.zoomIndicator.show()
         }
     }
     MediaKey {
@@ -698,12 +700,32 @@ FocusScope {
         onPressed: camera.lockAutoFocus()
         onReleased: camera.unlockAutoFocus()
     }
+
+    property bool camKeyEnabled: camera.imageCapture.ready
+                                 && keysResource.acquired
+                                 && camera.captureMode == Camera.CaptureStillImage
+                                 && !captureButtonPressed
+                                 && !captureView._captureOnFocus
+
     MediaKey {
-        enabled: volumeUp.enabled || (captureView.activeFocus && camera.captureMode == Camera.CaptureVideo)
+        enabled: volumeUp.enabled
         key: Qt.Key_Camera
         // compared to volume keys, this captures already on press.
         // can be done because there's half pressed state too.
-        onPressed: captureView._triggerCapture()
+        onPressed: {
+		if (camera.captureMode == Camera.CaptureVideo)
+		    captureView._triggerCapture()
+ 		else 
+		    camera.lockAutoFocus()
+	}
+	onReleased: {
+		if (camera.captureMode == Camera.CaptureStillImage) {
+                    if (enabled)
+                        captureView._triggerCapture()
+                    else
+                        camera.unlockAutoFocus()
+		}
+	}
     }
 
     Permissions {
