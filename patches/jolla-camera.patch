diff --git a/CaptureOverlay.qml b/CaptureOverlay.qml
index 0fc12cd..0ef63a0 100644
--- a/CaptureOverlay.qml
+++ b/CaptureOverlay.qml
@@ -23,6 +23,8 @@ SettingsOverlay {
     property int _recordingDuration: clock.enabled ? ((clock.time - _startTime) / 1000) : 0
     property var _startTime: new Date()
 
+    property alias zoomIndicator: zoomIndicator
+
     width: captureView.width
     height: captureView.height
 
diff --git a/CaptureView.qml b/CaptureView.qml
index c805813..3d654ef 100644
--- a/CaptureView.qml
+++ b/CaptureView.qml
@@ -73,9 +73,8 @@ FocusScope {
         }
     }
 
-    property bool handleVolumeKeys: camera.imageCapture.ready
-                                    && keysResource.acquired
-                                    && camera.captureMode == Camera.CaptureStillImage
+    property bool handleVolumeKeys: keysResource.acquired
+                                    && ((camera.captureMode == Camera.CaptureStillImage) || (camera.captureMode == Camera.CaptureVideo))
                                     && !captureView._captureOnFocus
     property bool captureOnVolumeRelease
 
@@ -469,8 +468,6 @@ FocusScope {
 
         viewfinder {
             resolution: Settings.mode.viewfinderResolution
-            minimumFrameRate: 30
-            maximumFrameRate: 30
         }
 
         metaData {
@@ -682,15 +679,18 @@ FocusScope {
     }
 
     Keys.onVolumeDownPressed: {
-        if (handleVolumeKeys && !event.isAutoRepeat) {
-            camera.lockAutoFocus()
-            captureOnVolumeRelease = true
+        if (handleVolumeKeys) {
+            camera.digitalZoom = Math.max(1, camera.digitalZoom - 1)
+            captureOverlay.zoomIndicator.show()
         }
     }
     Keys.onVolumeUpPressed: {
-        if (handleVolumeKeys && !event.isAutoRepeat) {
-            camera.lockAutoFocus()
-            captureOnVolumeRelease = true
+        if (handleVolumeKeys) {
+            camera.digitalZoom = Math.min(camera.maximumDigitalZoom, camera.digitalZoom + 1)
+            if (!event.isAutoRepeat) {
+                captureOverlay.zoomIndicator.maximumZoom = camera.maximumDigitalZoom
+            }
+            captureOverlay.zoomIndicator.show()
         }
     }
 
@@ -710,10 +710,13 @@ FocusScope {
             return
         }
 
-        if (event.key == Qt.Key_CameraFocus) {
-            camera.lockAutoFocus()
-        } else if (event.key == Qt.Key_Camera) {
-            captureView._triggerCapture() // key having half-pressed state too so can capture already here
+        if (event.key == Qt.Key_Camera) {
+            if (camera.captureMode == Camera.CaptureVideo) {
+                captureView._triggerCapture()
+            } else {
+                camera.lockAutoFocus()
+                captureOnVolumeRelease = true
+            }
         }
     }
 
@@ -726,18 +729,14 @@ FocusScope {
             return
         }
 
-        if (event.key == Qt.Key_CameraFocus) {
-            // note: forces capture if it was still pending. debatable if that should be allowed to finish.
-            camera.unlockAutoFocus()
-        } else if ((event.key == Qt.Key_VolumeDown || event.key == Qt.Key_VolumeUp)
-                   && captureOnVolumeRelease && handleVolumeKeys) {
+        if ((event.key == Qt.Key_Camera) && captureOnVolumeRelease && handleVolumeKeys) {
             captureView._triggerCapture()
         }
     }
 
     Permissions {
         enabled: captureView.activeFocus
-                    && camera.captureMode == Camera.CaptureStillImage
+                    && ((camera.captureMode == Camera.CaptureStillImage) || (camera.captureMode == Camera.CaptureVideo))
                     && camera.cameraState == Camera.ActiveState
         autoRelease: true
         applicationClass: "camera"
